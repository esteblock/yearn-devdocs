"use strict";(self.webpackChunkyearn_devdocs=self.webpackChunkyearn_devdocs||[]).push([[7841],{3905:(e,t,a)=>{a.d(t,{kt:()=>u});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),p=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=p(a),c=n,k=u["".concat(s,".").concat(c)]||u[c]||d[c]||l;return a?r.createElement(k,i(i({ref:t},m),{},{components:a})):r.createElement(k,i({ref:t},m))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,i=new Array(l);i[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:n,i[1]=o;for(var p=2;p<l;p++)i[p]=a[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},5896:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var r=a(7462),n=(a(7294),a(3905));const l={},i="Deploying a Vault and Strategy V2",o={unversionedId:"process-and-procedures/deployment",id:"version-0.4.2/process-and-procedures/deployment",title:"Deploying a Vault and Strategy V2",description:"Note: The Chief Multisig Officer repo is encouraged to create multiple scripts for governance and dev multisig execution of complex transactions.",source:"@site/versioned_docs/version-0.4.2/process-and-procedures/deployment.md",sourceDirName:"process-and-procedures",slug:"/process-and-procedures/deployment",permalink:"/vaults/0.4.2/process-and-procedures/deployment",draft:!1,editUrl:"https://github.com/yearn/yearn-devdocs/edit/master/website/versioned_docs/version-0.4.2/process-and-procedures/deployment.md",tags:[],version:"0.4.2",frontMatter:{},sidebar:"version-0.4.2/mySidebar",previous:{title:"Getting Started with Vaults",permalink:"/vaults/0.4.2/getting-started"},next:{title:"Operations procedures",permalink:"/vaults/0.4.2/process-and-procedures/operations"}},s={},p=[{value:"Requirements",id:"requirements",level:2},{value:"Deploying a new Experimental Vault",id:"deploying-a-new-experimental-vault",level:2},{value:"Deploying a new Strategy",id:"deploying-a-new-strategy",level:2},{value:"Make the Vault and Strategy work together",id:"make-the-vault-and-strategy-work-together",level:2},{value:"Test harvesting manually",id:"test-harvesting-manually",level:2},{value:"Scaling up / Moving to Endorse",id:"scaling-up--moving-to-endorse",level:2},{value:"Endorsing a vault from a previous release",id:"endorsing-a-vault-from-a-previous-release",level:3},{value:"Setting up Keep3r",id:"setting-up-keep3r",level:2},{value:"References",id:"references",level:2},{value:"Limits per Stage",id:"limits-per-stage",level:3},{value:"Sharer contract",id:"sharer-contract",level:3},{value:"Addresses",id:"addresses",level:3}],d={toc:p};function m(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"deploying-a-vault-and-strategy-v2"},"Deploying a Vault and Strategy V2"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Note"),": The Chief Multisig Officer repo is encouraged to create multiple scripts for governance and dev multisig execution of complex transactions."),(0,n.kt)("h2",{id:"requirements"},"Requirements"),(0,n.kt)("p",null,"Make sure you have the brownie environment setup before trying to deploy a vault. Check out the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/yearn/yearn-vaults/blob/master/README.md"},"Readme MD")," for instructions."),(0,n.kt)("p",null,"The below instructions show some python commands that assume you are using the brownie console or a brownie script setup is in place."),(0,n.kt)("h2",{id:"deploying-a-new-experimental-vault"},"Deploying a new Experimental Vault"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Clone this repo and run ",(0,n.kt)("inlineCode",{parentName:"p"},"brownie run scripts/deploy.py --network <network-to-deploy-vault>"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Choose the brownie account for deploying your vault. This account needs to have balance to pay for the deploy transaction.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Confirm the script is using the latest version of registry ",(0,n.kt)("inlineCode",{parentName:"p"},"v2.registry.ychad.eth")," against the planned new release vault to be sure its an updated version. (Can validate on Etherscan for latest address)")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Select the version of vault to deploy or press enter to use latest release.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Enter ",(0,n.kt)("inlineCode",{parentName:"p"},"Y")," when prompt to deploy Proxy Vault")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Enter the checksummed address of the ERC20 token the vault will use. ")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Enter the vault Parameters (Below are some suggested values):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Set your address or an address you control as governance."),(0,n.kt)("li",{parentName:"ul"},"Set Treasury (",(0,n.kt)("inlineCode",{parentName:"li"},"treasury.ychad.eth"),") as the rewards address."),(0,n.kt)("li",{parentName:"ul"},"Set Core Dev multisig (",(0,n.kt)("inlineCode",{parentName:"li"},"dev.ychad.eth"),") as guardian."),(0,n.kt)("li",{parentName:"ul"},"Set Strategist multisig (",(0,n.kt)("inlineCode",{parentName:"li"},"brain.ychad.eth"),") as management."),(0,n.kt)("li",{parentName:"ul"},"Set description and symbol for vault or use suggested as default (can be changed on chain later)"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Confirm the Parameters are set correctly and press ",(0,n.kt)("inlineCode",{parentName:"p"},"y"),"and ENTER to deploy vault. ")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Check new vault has ABI setup on Etherscan (Some vault versions from older releases may have verification issues with Vyper and proxy detection on Etherscan, consider using latest releases >0.3.5 to ensure verification works).")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Set up the vault with correct deposit limit:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-python"},"vault.setDepositLimit(limit)\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Set management fee to 0:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-python"},"vault.setManagementFee(0)\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"(Optional) Set governance to ychad.eth (",(0,n.kt)("inlineCode",{parentName:"p"},"0xFEB4acf3df3cDEA7399794D0869ef76A6EfAff52"),") if vault is planned to be endorsed soon:"))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Note you can still make changes to the vault after setting governance up until governance is accepted"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-python"},"vault.setGovernance(ychad.eth)\n")))),(0,n.kt)("h2",{id:"deploying-a-new-strategy"},"Deploying a new Strategy"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Discuss your strategy in Discord or Telegram to gain access to the yearn/yearn-strategies repository."),(0,n.kt)("li",{parentName:"ol"},"Create a new issue in the strategies' ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/yearn/yearn-strategies/issues"},"repo")," using the template ",(0,n.kt)("inlineCode",{parentName:"li"},"Strategy Review"),". ",(0,n.kt)("strong",{parentName:"li"},"Complete all the fields"),"."),(0,n.kt)("li",{parentName:"ol"},"If the strategy is targeting a new protocol/new chain, not currently approved by yearn (used in production), a due diligence and path to production plan documents may also be required for the strategy to be considered for endorsing. ",(0,n.kt)("a",{parentName:"li",href:"https://hackmd.io/@ucVuhc2gShSGsOJwjaDvqg/HJ1ZplgTO"},"PATH TO PROD"),"\nExamples ",(0,n.kt)("a",{parentName:"li",href:"https://hackmd.io/0w1RZh7DSc27A9EyzlHbJQ?view"},"SNX"),", ",(0,n.kt)("a",{parentName:"li",href:"https://hackmd.io/@Ap_76vwNTg-vxJxbiaLMMQ/SkXEzic7O"},"VESPER")," "),(0,n.kt)("li",{parentName:"ol"},"Coordinate with Core Dev strategist for getting a review on ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/orgs/yearn/projects/5"},"board"),"."),(0,n.kt)("li",{parentName:"ol"},"Complete peer review by at least 2 strategists."),(0,n.kt)("li",{parentName:"ol"},"Check if ",(0,n.kt)("inlineCode",{parentName:"li"},"want")," token has a deployed vault already (>=v0.3.0) and coordinate to use that first if possible."),(0,n.kt)("li",{parentName:"ol"},"Coordinate with core developer to set proper deposit limit and other settings for new vault. See the table below: ",(0,n.kt)("a",{parentName:"li",href:"#limits-per-stage"},"Limits per Stage"),"."),(0,n.kt)("li",{parentName:"ol"},"Deploy strategy and upload code to Etherscan for verification."),(0,n.kt)("li",{parentName:"ol"},"Tag GitHub review issue with deployed version and add mainnet address(es) to the ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/orgs/yearn/projects/5"},"board"),".")),(0,n.kt)("h2",{id:"make-the-vault-and-strategy-work-together"},"Make the Vault and Strategy work together"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Add strategy to vault (for vault code v0.3.3+):"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-python"},"strategy = ''                     # Your strategy address\ndebt_ratio = 9800                 # 98%\nminDebtPerHarvest = 0             # Lower limit on debt add\nmaxDebtPerHarvest = 2 ** 256 - 1  # Upper limit on debt add\nperformance_fee = 1000            # Strategist perf fee: 10%\n\nvault.addStrategy(\n  strategy, \n  debt_ratio, \n  minDebtPerHarvest,\n  maxDebtPerHarvest,\n  performance_fee\n)\n")),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"debt_ratio")," should be ",(0,n.kt)("inlineCode",{parentName:"li"},"9800")," if first strategy on vault."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"rate_limit")," is ",(0,n.kt)("inlineCode",{parentName:"li"},"0")," unless there is reason for it to be different."))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Set keeper:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-python"},"strategy.setKeeper(keep3r_manager)\n")),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"keep3r_manager")," = ",(0,n.kt)("inlineCode",{parentName:"li"},"0x736D7e3c5a6CB2CE3B764300140ABF476F6CFCCF")))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Set rewards:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-python"},"strategy.setRewards(address)\n")),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Read ",(0,n.kt)("a",{parentName:"li",href:"#sharer-contract"},"below")," if you want to use the sharer contract."))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},'Run tests against "live" vault and strategy in mainnet-fork:'),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Harvest.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Profitable harvest.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Revoke strategy and check that funds return to the vault.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Increase/decrease debt + harvest, and check that the strategy is working well.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Migration.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Check that tokens in the strategy cannot be sweeped by dust collection.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Example"),": Hegic strat ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/Macarse/yhegic/tree/master/tests/development"},"repo"),"."))))),(0,n.kt)("h2",{id:"test-harvesting-manually"},"Test harvesting manually"),(0,n.kt)("p",null,"If you need a UI to test, you can coordinate with the strategists."),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Deposit some ",(0,n.kt)("inlineCode",{parentName:"p"},"want")," tokens into the vault.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Do first ",(0,n.kt)("inlineCode",{parentName:"p"},"harvest")," and make sure it worked correctly."),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-python"},"strategy.harvest()\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Monitor ",(0,n.kt)("inlineCode",{parentName:"p"},"harvest")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"tend")," triggers for first few days. Call ",(0,n.kt)("inlineCode",{parentName:"p"},"harvest"),"/",(0,n.kt)("inlineCode",{parentName:"p"},"tend")," manually."))),(0,n.kt)("h2",{id:"scaling-up--moving-to-endorse"},"Scaling up / Moving to Endorse"),(0,n.kt)("p",null,"In addition to the 2 strategists, a Core Developer has to review the strategy before going into production."),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Increase deposit limit according to the table ",(0,n.kt)("a",{parentName:"p",href:"#limits-per-stage"},"below"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Set management fee to production level:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-python"},"vault.setManagementFee(200)\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Set parameters for vault correctly before endorse:"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Set Governance to (",(0,n.kt)("inlineCode",{parentName:"li"},"ychad.eth"),") "),(0,n.kt)("li",{parentName:"ul"},"Set Treasury (",(0,n.kt)("inlineCode",{parentName:"li"},"treasury.ychad.eth"),") as the rewards address."),(0,n.kt)("li",{parentName:"ul"},"Set Core Dev multisig (",(0,n.kt)("inlineCode",{parentName:"li"},"dev.ychad.eth"),") as guardian."),(0,n.kt)("li",{parentName:"ul"},"Set Strategist multisig (",(0,n.kt)("inlineCode",{parentName:"li"},"brain.ychad.eth"),") as management."),(0,n.kt)("li",{parentName:"ul"},"Set description and symbol for vault or use suggested as default (can be changed on chain later)"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Yearn governance now must accept governance and endorse the vault:"))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"strategy.acceptGovernance()\nregistry.endorseVault(vault)\n")),(0,n.kt)("h3",{id:"endorsing-a-vault-from-a-previous-release"},"Endorsing a vault from a previous release"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Check for latest release number in the registry contract")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Check the apiVersion of the vault you want to endorse to identify target release")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Calculate the releaseDelta from your target release. (see registry endorseVault param details)\nE.g: latestRelease = 0.3.3 and numReleases = 5. New vault apiVersion is 0.3.2\n",(0,n.kt)("inlineCode",{parentName:"p"},"releaseDelta = numReleases - 1 - releaseTarget"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Confirm using ",(0,n.kt)("inlineCode",{parentName:"p"},"registry.releases(uint256)")," that your ",(0,n.kt)("inlineCode",{parentName:"p"},"targetRelease")," has the same apiVersion as your vault."),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-python"},"releaseTarget = 3 # e.g vault api version 0.3.2\nreleaseDelta = registry.numReleases() - 1 - releaseTarget # (5-1-3) = 1\nstrategy.acceptGovernance() # from ychad.eth\nregistry.endorseVault(vault, releaseDelta) # from ychad.eth.\n")))),(0,n.kt)("h2",{id:"setting-up-keep3r"},"Setting up Keep3r"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Adjust trigger variables until they are correct:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-python"},"strategy.setProfitFactor()\nstrategy.setDebtThreshold()\nstrategy.setMaxReportDelay()\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Set strategy's Keep3r role to v2-keeper-contract"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-python"},"strategy.setKeeper(0x736D7e3c5a6CB2CE3B764300140ABF476F6CFCCF)\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Create an add-strategy PR in Keep3r ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/yearn/yearn-keeper"},"repo")," (TBD)"))),(0,n.kt)("h2",{id:"references"},"References"),(0,n.kt)("h3",{id:"limits-per-stage"},"Limits per Stage"),(0,n.kt)("p",null,"These are the standard deposit limits per stage. They can be adjusted on a case by case basis."),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Stage"),(0,n.kt)("th",{parentName:"tr",align:null},"Limit"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Experimental"),(0,n.kt)("td",{parentName:"tr",align:null},"$500K")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Production"),(0,n.kt)("td",{parentName:"tr",align:null},"$10M")))),(0,n.kt)("h3",{id:"sharer-contract"},"Sharer contract"),(0,n.kt)("p",null,'"Sharer" is a contract for distributing/splitting strategist rewards. For boarding school graduates suggested split is 34% to strategist multisig and 66% to strategist \u2013 ',(0,n.kt)("a",{parentName:"p",href:"https://github.com/Grandthrax/Sharer"},"Sharer Contract"),"."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Setup rewards for your strategy by calling ",(0,n.kt)("inlineCode",{parentName:"li"},"sharer.addContributors"),"."),(0,n.kt)("li",{parentName:"ul"},"Include devs if you forked someone else's strategy."),(0,n.kt)("li",{parentName:"ul"},"Be sure to reward people who helped you."),(0,n.kt)("li",{parentName:"ul"},"You can find the sharer here: ",(0,n.kt)("a",{parentName:"li",href:"https://etherscan.io/address/0x2c641e14afecb16b4aa6601a40ee60c3cc792f7d"},"0x2c641e14afecb16b4aa6601a40ee60c3cc792f7d"))),(0,n.kt)("h3",{id:"addresses"},"Addresses"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Identity"),(0,n.kt)("th",{parentName:"tr",align:null},"ENS"),(0,n.kt)("th",{parentName:"tr",align:null},"Address"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"V2 Registry"),(0,n.kt)("td",{parentName:"tr",align:null},"v2.registry.ychad.eth"),(0,n.kt)("td",{parentName:"tr",align:null},"0x50c1a2eA0a861A967D9d0FFE2AE4012c2E053804")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Yearn multisig (daddy)"),(0,n.kt)("td",{parentName:"tr",align:null},"ychad.eth"),(0,n.kt)("td",{parentName:"tr",align:null},"0xFEB4acf3df3cDEA7399794D0869ef76A6EfAff52")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Strategist multisig"),(0,n.kt)("td",{parentName:"tr",align:null},"brain.ychad.eth"),(0,n.kt)("td",{parentName:"tr",align:null},"0x16388463d60FFE0661Cf7F1f31a7D658aC790ff7")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Core Dev multisig"),(0,n.kt)("td",{parentName:"tr",align:null},"dev.ychad.eth"),(0,n.kt)("td",{parentName:"tr",align:null},"0x846e211e8ba920B353FB717631C015cf04061Cc9")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Treasury"),(0,n.kt)("td",{parentName:"tr",align:null},"treasury.ychad.eth"),(0,n.kt)("td",{parentName:"tr",align:null},"0xfeb4acf3df3cdea7399794d0869ef76a6efaff52")))))}m.isMDXComponent=!0}}]);